#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QLBN_COVID.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="qlbn_Covid")]
	public partial class CovidDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertWard(Ward instance);
    partial void UpdateWard(Ward instance);
    partial void DeleteWard(Ward instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertDistrict(District instance);
    partial void UpdateDistrict(District instance);
    partial void DeleteDistrict(District instance);
    partial void InsertHistory_Treatment(History_Treatment instance);
    partial void UpdateHistory_Treatment(History_Treatment instance);
    partial void DeleteHistory_Treatment(History_Treatment instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPlace_Of_Treatment(Place_Of_Treatment instance);
    partial void UpdatePlace_Of_Treatment(Place_Of_Treatment instance);
    partial void DeletePlace_Of_Treatment(Place_Of_Treatment instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertUser_Activity(User_Activity instance);
    partial void UpdateUser_Activity(User_Activity instance);
    partial void DeleteUser_Activity(User_Activity instance);
    partial void InsertUser_Log(User_Log instance);
    partial void UpdateUser_Log(User_Log instance);
    partial void DeleteUser_Log(User_Log instance);
    #endregion
		
		public CovidDataContext() : 
				base(global::QLBN_COVID.Properties.Settings.Default.qlbn_CovidConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CovidDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CovidDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CovidDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CovidDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Ward> Wards
		{
			get
			{
				return this.GetTable<Ward>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<District> Districts
		{
			get
			{
				return this.GetTable<District>();
			}
		}
		
		public System.Data.Linq.Table<History_Treatment> History_Treatments
		{
			get
			{
				return this.GetTable<History_Treatment>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Place_Of_Treatment> Place_Of_Treatments
		{
			get
			{
				return this.GetTable<Place_Of_Treatment>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<User_Activity> User_Activities
		{
			get
			{
				return this.GetTable<User_Activity>();
			}
		}
		
		public System.Data.Linq.Table<User_Log> User_Logs
		{
			get
			{
				return this.GetTable<User_Log>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDAddress;
		
		private string _Street;
		
		private int _IDWard;
		
		private int _IDDistrict;
		
		private int _IDCity;
		
		private EntitySet<Patient> _Patients;
		
		private EntitySet<Place_Of_Treatment> _Place_Of_Treatments;
		
		private EntityRef<Ward> _Ward;
		
		private EntityRef<City> _City;
		
		private EntityRef<District> _District;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAddressChanging(int value);
    partial void OnIDAddressChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnIDWardChanging(int value);
    partial void OnIDWardChanged();
    partial void OnIDDistrictChanging(int value);
    partial void OnIDDistrictChanged();
    partial void OnIDCityChanging(int value);
    partial void OnIDCityChanged();
    #endregion
		
		public Address()
		{
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._Place_Of_Treatments = new EntitySet<Place_Of_Treatment>(new Action<Place_Of_Treatment>(this.attach_Place_Of_Treatments), new Action<Place_Of_Treatment>(this.detach_Place_Of_Treatments));
			this._Ward = default(EntityRef<Ward>);
			this._City = default(EntityRef<City>);
			this._District = default(EntityRef<District>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAddress", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDAddress
		{
			get
			{
				return this._IDAddress;
			}
			set
			{
				if ((this._IDAddress != value))
				{
					this.OnIDAddressChanging(value);
					this.SendPropertyChanging();
					this._IDAddress = value;
					this.SendPropertyChanged("IDAddress");
					this.OnIDAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDWard", DbType="Int NOT NULL")]
		public int IDWard
		{
			get
			{
				return this._IDWard;
			}
			set
			{
				if ((this._IDWard != value))
				{
					if (this._Ward.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDWardChanging(value);
					this.SendPropertyChanging();
					this._IDWard = value;
					this.SendPropertyChanged("IDWard");
					this.OnIDWardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDistrict", DbType="Int NOT NULL")]
		public int IDDistrict
		{
			get
			{
				return this._IDDistrict;
			}
			set
			{
				if ((this._IDDistrict != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDistrictChanging(value);
					this.SendPropertyChanging();
					this._IDDistrict = value;
					this.SendPropertyChanged("IDDistrict");
					this.OnIDDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCity", DbType="Int NOT NULL")]
		public int IDCity
		{
			get
			{
				return this._IDCity;
			}
			set
			{
				if ((this._IDCity != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCityChanging(value);
					this.SendPropertyChanging();
					this._IDCity = value;
					this.SendPropertyChanged("IDCity");
					this.OnIDCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Patient", Storage="_Patients", ThisKey="IDAddress", OtherKey="IDAddress")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Place_Of_Treatment", Storage="_Place_Of_Treatments", ThisKey="IDAddress", OtherKey="IDAddress")]
		public EntitySet<Place_Of_Treatment> Place_Of_Treatments
		{
			get
			{
				return this._Place_Of_Treatments;
			}
			set
			{
				this._Place_Of_Treatments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ward_Address", Storage="_Ward", ThisKey="IDWard", OtherKey="IDWard", IsForeignKey=true)]
		public Ward Ward
		{
			get
			{
				return this._Ward.Entity;
			}
			set
			{
				Ward previousValue = this._Ward.Entity;
				if (((previousValue != value) 
							|| (this._Ward.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ward.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Ward.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._IDWard = value.IDWard;
					}
					else
					{
						this._IDWard = default(int);
					}
					this.SendPropertyChanged("Ward");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Address", Storage="_City", ThisKey="IDCity", OtherKey="IDCity", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._IDCity = value.IDCity;
					}
					else
					{
						this._IDCity = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Address", Storage="_District", ThisKey="IDDistrict", OtherKey="IDDistrict", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._IDDistrict = value.IDDistrict;
					}
					else
					{
						this._IDDistrict = default(int);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Place_Of_Treatments(Place_Of_Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Place_Of_Treatments(Place_Of_Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ward")]
	public partial class Ward : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDWard;
		
		private string _Name_of_ward;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDWardChanging(int value);
    partial void OnIDWardChanged();
    partial void OnName_of_wardChanging(string value);
    partial void OnName_of_wardChanged();
    #endregion
		
		public Ward()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDWard", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDWard
		{
			get
			{
				return this._IDWard;
			}
			set
			{
				if ((this._IDWard != value))
				{
					this.OnIDWardChanging(value);
					this.SendPropertyChanging();
					this._IDWard = value;
					this.SendPropertyChanged("IDWard");
					this.OnIDWardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_of_ward", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name_of_ward
		{
			get
			{
				return this._Name_of_ward;
			}
			set
			{
				if ((this._Name_of_ward != value))
				{
					this.OnName_of_wardChanging(value);
					this.SendPropertyChanging();
					this._Name_of_ward = value;
					this.SendPropertyChanged("Name_of_ward");
					this.OnName_of_wardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ward_Address", Storage="_Addresses", ThisKey="IDWard", OtherKey="IDWard")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Ward = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Ward = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCity;
		
		private string _Name_of_city;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCityChanging(int value);
    partial void OnIDCityChanged();
    partial void OnName_of_cityChanging(string value);
    partial void OnName_of_cityChanged();
    #endregion
		
		public City()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCity", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCity
		{
			get
			{
				return this._IDCity;
			}
			set
			{
				if ((this._IDCity != value))
				{
					this.OnIDCityChanging(value);
					this.SendPropertyChanging();
					this._IDCity = value;
					this.SendPropertyChanged("IDCity");
					this.OnIDCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_of_city", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name_of_city
		{
			get
			{
				return this._Name_of_city;
			}
			set
			{
				if ((this._Name_of_city != value))
				{
					this.OnName_of_cityChanging(value);
					this.SendPropertyChanging();
					this._Name_of_city = value;
					this.SendPropertyChanged("Name_of_city");
					this.OnName_of_cityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Address", Storage="_Addresses", ThisKey="IDCity", OtherKey="IDCity")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.District")]
	public partial class District : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDDistrict;
		
		private string _Name_of_district;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDistrictChanging(int value);
    partial void OnIDDistrictChanged();
    partial void OnName_of_districtChanging(string value);
    partial void OnName_of_districtChanged();
    #endregion
		
		public District()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDistrict", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDDistrict
		{
			get
			{
				return this._IDDistrict;
			}
			set
			{
				if ((this._IDDistrict != value))
				{
					this.OnIDDistrictChanging(value);
					this.SendPropertyChanging();
					this._IDDistrict = value;
					this.SendPropertyChanged("IDDistrict");
					this.OnIDDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_of_district", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name_of_district
		{
			get
			{
				return this._Name_of_district;
			}
			set
			{
				if ((this._Name_of_district != value))
				{
					this.OnName_of_districtChanging(value);
					this.SendPropertyChanging();
					this._Name_of_district = value;
					this.SendPropertyChanged("Name_of_district");
					this.OnName_of_districtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Address", Storage="_Addresses", ThisKey="IDDistrict", OtherKey="IDDistrict")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.History_Treatment")]
	public partial class History_Treatment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDBN;
		
		private System.DateTime _DateStart;
		
		private System.DateTime _DateEnd;
		
		private int _IDTreatment;
		
		private int _IDStatus;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBNChanging(string value);
    partial void OnIDBNChanged();
    partial void OnDateStartChanging(System.DateTime value);
    partial void OnDateStartChanged();
    partial void OnDateEndChanging(System.DateTime value);
    partial void OnDateEndChanged();
    partial void OnIDTreatmentChanging(int value);
    partial void OnIDTreatmentChanged();
    partial void OnIDStatusChanging(int value);
    partial void OnIDStatusChanged();
    #endregion
		
		public History_Treatment()
		{
			this._Patient = default(EntityRef<Patient>);
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBN", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDBN
		{
			get
			{
				return this._IDBN;
			}
			set
			{
				if ((this._IDBN != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBNChanging(value);
					this.SendPropertyChanging();
					this._IDBN = value;
					this.SendPropertyChanged("IDBN");
					this.OnIDBNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStart", DbType="DateTime NOT NULL")]
		public System.DateTime DateStart
		{
			get
			{
				return this._DateStart;
			}
			set
			{
				if ((this._DateStart != value))
				{
					this.OnDateStartChanging(value);
					this.SendPropertyChanging();
					this._DateStart = value;
					this.SendPropertyChanged("DateStart");
					this.OnDateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="DateTime NOT NULL")]
		public System.DateTime DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTreatment", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDTreatment
		{
			get
			{
				return this._IDTreatment;
			}
			set
			{
				if ((this._IDTreatment != value))
				{
					this.OnIDTreatmentChanging(value);
					this.SendPropertyChanging();
					this._IDTreatment = value;
					this.SendPropertyChanged("IDTreatment");
					this.OnIDTreatmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStatus", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDStatus
		{
			get
			{
				return this._IDStatus;
			}
			set
			{
				if ((this._IDStatus != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDStatusChanging(value);
					this.SendPropertyChanging();
					this._IDStatus = value;
					this.SendPropertyChanged("IDStatus");
					this.OnIDStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_History_Treatment", Storage="_Patient", ThisKey="IDBN", OtherKey="CMND", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.History_Treatments.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.History_Treatments.Add(this);
						this._IDBN = value.CMND;
					}
					else
					{
						this._IDBN = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_History_Treatment", Storage="_Status", ThisKey="IDStatus", OtherKey="IDStatus", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.History_Treatments.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.History_Treatments.Add(this);
						this._IDStatus = value.IDStatus;
					}
					else
					{
						this._IDStatus = default(int);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CMND;
		
		private string _FullName;
		
		private long _YearOfBirth;
		
		private int _IDAddress;
		
		private int _IDStatus;
		
		private int _IDTreatment;
		
		private string _People_Involved;
		
		private EntitySet<History_Treatment> _History_Treatments;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Place_Of_Treatment> _Place_Of_Treatment;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCMNDChanging(string value);
    partial void OnCMNDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnYearOfBirthChanging(long value);
    partial void OnYearOfBirthChanged();
    partial void OnIDAddressChanging(int value);
    partial void OnIDAddressChanged();
    partial void OnIDStatusChanging(int value);
    partial void OnIDStatusChanged();
    partial void OnIDTreatmentChanging(int value);
    partial void OnIDTreatmentChanged();
    partial void OnPeople_InvolvedChanging(string value);
    partial void OnPeople_InvolvedChanged();
    #endregion
		
		public Patient()
		{
			this._History_Treatments = new EntitySet<History_Treatment>(new Action<History_Treatment>(this.attach_History_Treatments), new Action<History_Treatment>(this.detach_History_Treatments));
			this._Address = default(EntityRef<Address>);
			this._Place_Of_Treatment = default(EntityRef<Place_Of_Treatment>);
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMND", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CMND
		{
			get
			{
				return this._CMND;
			}
			set
			{
				if ((this._CMND != value))
				{
					this.OnCMNDChanging(value);
					this.SendPropertyChanging();
					this._CMND = value;
					this.SendPropertyChanged("CMND");
					this.OnCMNDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearOfBirth", DbType="BigInt NOT NULL")]
		public long YearOfBirth
		{
			get
			{
				return this._YearOfBirth;
			}
			set
			{
				if ((this._YearOfBirth != value))
				{
					this.OnYearOfBirthChanging(value);
					this.SendPropertyChanging();
					this._YearOfBirth = value;
					this.SendPropertyChanged("YearOfBirth");
					this.OnYearOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAddress", DbType="Int NOT NULL")]
		public int IDAddress
		{
			get
			{
				return this._IDAddress;
			}
			set
			{
				if ((this._IDAddress != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAddressChanging(value);
					this.SendPropertyChanging();
					this._IDAddress = value;
					this.SendPropertyChanged("IDAddress");
					this.OnIDAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStatus", DbType="Int NOT NULL")]
		public int IDStatus
		{
			get
			{
				return this._IDStatus;
			}
			set
			{
				if ((this._IDStatus != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDStatusChanging(value);
					this.SendPropertyChanging();
					this._IDStatus = value;
					this.SendPropertyChanged("IDStatus");
					this.OnIDStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTreatment", DbType="Int NOT NULL")]
		public int IDTreatment
		{
			get
			{
				return this._IDTreatment;
			}
			set
			{
				if ((this._IDTreatment != value))
				{
					if (this._Place_Of_Treatment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTreatmentChanging(value);
					this.SendPropertyChanging();
					this._IDTreatment = value;
					this.SendPropertyChanged("IDTreatment");
					this.OnIDTreatmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_People_Involved", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string People_Involved
		{
			get
			{
				return this._People_Involved;
			}
			set
			{
				if ((this._People_Involved != value))
				{
					this.OnPeople_InvolvedChanging(value);
					this.SendPropertyChanging();
					this._People_Involved = value;
					this.SendPropertyChanged("People_Involved");
					this.OnPeople_InvolvedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_History_Treatment", Storage="_History_Treatments", ThisKey="CMND", OtherKey="IDBN")]
		public EntitySet<History_Treatment> History_Treatments
		{
			get
			{
				return this._History_Treatments;
			}
			set
			{
				this._History_Treatments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Patient", Storage="_Address", ThisKey="IDAddress", OtherKey="IDAddress", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._IDAddress = value.IDAddress;
					}
					else
					{
						this._IDAddress = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Of_Treatment_Patient", Storage="_Place_Of_Treatment", ThisKey="IDTreatment", OtherKey="ID", IsForeignKey=true)]
		public Place_Of_Treatment Place_Of_Treatment
		{
			get
			{
				return this._Place_Of_Treatment.Entity;
			}
			set
			{
				Place_Of_Treatment previousValue = this._Place_Of_Treatment.Entity;
				if (((previousValue != value) 
							|| (this._Place_Of_Treatment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Place_Of_Treatment.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Place_Of_Treatment.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._IDTreatment = value.ID;
					}
					else
					{
						this._IDTreatment = default(int);
					}
					this.SendPropertyChanged("Place_Of_Treatment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Patient", Storage="_Status", ThisKey="IDStatus", OtherKey="IDStatus", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._IDStatus = value.IDStatus;
					}
					else
					{
						this._IDStatus = default(int);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_History_Treatments(History_Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_History_Treatments(History_Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Place_Of_Treatment")]
	public partial class Place_Of_Treatment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDAddress;
		
		private string _Name;
		
		private int _Capacity;
		
		private int _Current_Quantity;
		
		private EntitySet<Patient> _Patients;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDAddressChanging(int value);
    partial void OnIDAddressChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnCurrent_QuantityChanging(int value);
    partial void OnCurrent_QuantityChanged();
    #endregion
		
		public Place_Of_Treatment()
		{
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAddress", DbType="Int NOT NULL")]
		public int IDAddress
		{
			get
			{
				return this._IDAddress;
			}
			set
			{
				if ((this._IDAddress != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAddressChanging(value);
					this.SendPropertyChanging();
					this._IDAddress = value;
					this.SendPropertyChanged("IDAddress");
					this.OnIDAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Current_Quantity", DbType="Int NOT NULL")]
		public int Current_Quantity
		{
			get
			{
				return this._Current_Quantity;
			}
			set
			{
				if ((this._Current_Quantity != value))
				{
					this.OnCurrent_QuantityChanging(value);
					this.SendPropertyChanging();
					this._Current_Quantity = value;
					this.SendPropertyChanged("Current_Quantity");
					this.OnCurrent_QuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Of_Treatment_Patient", Storage="_Patients", ThisKey="ID", OtherKey="IDTreatment")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Place_Of_Treatment", Storage="_Address", ThisKey="IDAddress", OtherKey="IDAddress", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Place_Of_Treatments.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Place_Of_Treatments.Add(this);
						this._IDAddress = value.IDAddress;
					}
					else
					{
						this._IDAddress = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Place_Of_Treatment = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Place_Of_Treatment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDStatus;
		
		private string _Kind_Of_Status;
		
		private EntitySet<History_Treatment> _History_Treatments;
		
		private EntitySet<Patient> _Patients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDStatusChanging(int value);
    partial void OnIDStatusChanged();
    partial void OnKind_Of_StatusChanging(string value);
    partial void OnKind_Of_StatusChanged();
    #endregion
		
		public Status()
		{
			this._History_Treatments = new EntitySet<History_Treatment>(new Action<History_Treatment>(this.attach_History_Treatments), new Action<History_Treatment>(this.detach_History_Treatments));
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStatus", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDStatus
		{
			get
			{
				return this._IDStatus;
			}
			set
			{
				if ((this._IDStatus != value))
				{
					this.OnIDStatusChanging(value);
					this.SendPropertyChanging();
					this._IDStatus = value;
					this.SendPropertyChanged("IDStatus");
					this.OnIDStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kind_Of_Status", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string Kind_Of_Status
		{
			get
			{
				return this._Kind_Of_Status;
			}
			set
			{
				if ((this._Kind_Of_Status != value))
				{
					this.OnKind_Of_StatusChanging(value);
					this.SendPropertyChanging();
					this._Kind_Of_Status = value;
					this.SendPropertyChanged("Kind_Of_Status");
					this.OnKind_Of_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_History_Treatment", Storage="_History_Treatments", ThisKey="IDStatus", OtherKey="IDStatus")]
		public EntitySet<History_Treatment> History_Treatments
		{
			get
			{
				return this._History_Treatments;
			}
			set
			{
				this._History_Treatments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Patient", Storage="_Patients", ThisKey="IDStatus", OtherKey="IDStatus")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_History_Treatments(History_Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_History_Treatments(History_Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Activities")]
	public partial class User_Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDActivity;
		
		private int _UserID;
		
		private System.DateTime _Timestamp;
		
		private string _Action;
		
		private EntityRef<User_Log> _User_Log;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDActivityChanging(int value);
    partial void OnIDActivityChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    #endregion
		
		public User_Activity()
		{
			this._User_Log = default(EntityRef<User_Log>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDActivity", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDActivity
		{
			get
			{
				return this._IDActivity;
			}
			set
			{
				if ((this._IDActivity != value))
				{
					this.OnIDActivityChanging(value);
					this.SendPropertyChanging();
					this._IDActivity = value;
					this.SendPropertyChanged("IDActivity");
					this.OnIDActivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User_Log.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Log_User_Activity", Storage="_User_Log", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User_Log User_Log
		{
			get
			{
				return this._User_Log.Entity;
			}
			set
			{
				User_Log previousValue = this._User_Log.Entity;
				if (((previousValue != value) 
							|| (this._User_Log.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User_Log.Entity = null;
						previousValue.User_Activities.Remove(this);
					}
					this._User_Log.Entity = value;
					if ((value != null))
					{
						value.User_Activities.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User_Log");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Log")]
	public partial class User_Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Password;
		
		private int _Role;
		
		private string _FullName;
		
		private string _Status;
		
		private EntitySet<User_Activity> _User_Activities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public User_Log()
		{
			this._User_Activities = new EntitySet<User_Activity>(new Action<User_Activity>(this.attach_User_Activities), new Action<User_Activity>(this.detach_User_Activities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int NOT NULL")]
		public int Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Log_User_Activity", Storage="_User_Activities", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<User_Activity> User_Activities
		{
			get
			{
				return this._User_Activities;
			}
			set
			{
				this._User_Activities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User_Activities(User_Activity entity)
		{
			this.SendPropertyChanging();
			entity.User_Log = this;
		}
		
		private void detach_User_Activities(User_Activity entity)
		{
			this.SendPropertyChanging();
			entity.User_Log = null;
		}
	}
}
#pragma warning restore 1591
